/src/components/blogform.js

import React, { useState, useEffect } from 'react';

function BlogForm({ addPost, currentPost, updatePost, clearCurrentPost }) {
  const [title, setTitle] = useState('');
  const [content, setContent] = useState('');
  const [tags, setTags] = useState('');
  const [category, setCategory] = useState('');

  useEffect(() => {
    if (currentPost) {
      setTitle(currentPost.title);
      setContent(currentPost.content);
      setTags(currentPost.tags.join(', '));
      setCategory(currentPost.category);
    } else {
      setTitle('');
      setContent('');
      setTags('');
      setCategory('');
    }
  }, [currentPost]);

  const handleSubmit = (e) => {
    e.preventDefault();
    const tagList = tags.split(',').map(tag => tag.trim()); // Convert tags to an array
    const newPost = { 
      id: currentPost ? currentPost.id : Date.now(), 
      title, 
      content, 
      tags: tagList, 
      category 
    };
    if (currentPost) {
      updatePost(newPost);
    } else {
      addPost(newPost);
    }
    setTitle('');
    setContent('');
    setTags('');
    setCategory('');
  };

  return (
    // In BlogForm component
    <form className="blog-form" onSubmit={handleSubmit}>
      <input
        type="text"
        value={title}
        onChange={(e) => setTitle(e.target.value)}
        placeholder="Title"
        required
      />
      <textarea
        value={content}
        onChange={(e) => setContent(e.target.value)}
        placeholder="Content"
        required
      />
      <input
        type="text"
        value={tags}
        onChange={(e) => setTags(e.target.value)}
        placeholder="Tags (comma-separated)"
      />
      <select value={category} onChange={(e) => setCategory(e.target.value)} required>
        <option value="">Select Category</option>
        <option value="Technology">Technology</option>
        <option value="Health">Health</option>
        <option value="Travel">Travel</option>
        <option value="Education">Education</option>
        <option value="Lifestyle">Lifestyle</option>
      </select>
      <button type="submit">{currentPost ? "Update Post" : "Add Post"}</button>
      {currentPost && (
        <button type="button" onClick={clearCurrentPost}>
          Add New Post
        </button>
      )}
    </form>
  );
}

export default BlogForm;


/src/components/bloglist.js

import React from 'react';

function BlogList({ posts, setCurrentPost, deletePost }) {
  return (
    <div className="blog-list">
      <h2>Posts</h2>
      {posts.map(post => (
        <div key={post.id}>
          <h3>{post.title}</h3>
          <p><strong>Category:</strong> {post.category}</p>
          <p><strong>Tags:</strong> {post.tags.join(', ')}</p>
          <button className="btn btn-edit" onClick={() => setCurrentPost(post)}>View</button>
          <button className="btn btn-delete" onClick={() => deletePost(post.id)}>Delete</button>
        </div>
      ))}
    </div>
  );
}

export default BlogList;

/src/components/blogpost.js

import React, { useState } from 'react';

function BlogPost({ post, addComment }) {
  const [comment, setComment] = useState('');

  const handleAddComment = (e) => {
    e.preventDefault();
    if (comment.trim()) {
      addComment(post.id, comment);
      setComment('');
    }
  };

  return (
    <div className="blog-post">
      <h2>{post.title}</h2>
      <p><strong>Category:</strong> {post.category}</p>
      <p><strong>Tags:</strong> {post.tags.join(', ')}</p>
      <p>{post.content}</p>
      
      <h3>Comments</h3>
      <ul>
        {(post.comments || []).map((comment, index) => (
          <li key={index}>{comment}</li>
        ))}
      </ul>
      
      <form onSubmit={handleAddComment}>
        <input 
          type="text" 
          value={comment} 
          onChange={(e) => setComment(e.target.value)} 
          placeholder="Add a comment" 
        />
        <button type="submit">Add Comment</button>
      </form>
    </div>
  );
}

export default BlogPost;

/src/commentsection.js

import React, { useState } from 'react';

function CommentSection() {
  const [comments, setComments] = useState([]);
  const [newComment, setNewComment] = useState('');

  const addComment = () => {
    setComments([...comments, newComment]);
    setNewComment('');
  };

  return (
    <div className="comment-section">
      <h3>Comments</h3>
      {comments.map((comment, index) => (
        <p key={index}>{comment}</p>
      ))}
      <input
        type="text"
        value={newComment}
        onChange={(e) => setNewComment(e.target.value)}
        placeholder="Add a comment"
      />
      <button onClick={addComment}>Add Comment</button>
    </div>
  );
}

export default CommentSection;

/src/App.js

import React, { useState } from 'react';
import BlogList from './components/BlogList';
import BlogForm from './components/BlogForm';
import BlogPost from './components/BlogPost';
import './App.css';

function App() {
  const [posts, setPosts] = useState([]);
  const [currentPost, setCurrentPost] = useState(null);

  const addPost = (post) => setPosts([...posts, post]);
  const updatePost = (updatedPost) => setPosts(posts.map(post => post.id === updatedPost.id ? updatedPost : post));
  const deletePost = (id) => {
    setPosts(posts.filter(post => post.id !== id));
    if (currentPost && currentPost.id === id) {
      setCurrentPost(null);
    }
  };
  const clearCurrentPost = () => setCurrentPost(null);

  // Function to add a comment to the current post
  const addComment = (postId, comment) => {
    const updatedPosts = posts.map(post => 
      post.id === postId 
        ? { ...post, comments: [...(post.comments || []), comment] } 
        : post
    );
    setPosts(updatedPosts);

    // Update the currentPost to immediately reflect the new comment
    const updatedPost = updatedPosts.find(post => post.id === postId);
    setCurrentPost(updatedPost);
  };

  return (
    <div className="App">
      <h1>Blog Platform</h1>
      <BlogForm addPost={addPost} currentPost={currentPost} updatePost={updatePost} clearCurrentPost={clearCurrentPost} />
      <BlogList posts={posts} setCurrentPost={setCurrentPost} deletePost={deletePost} />
      {currentPost && <BlogPost post={currentPost} addComment={addComment} />}
    </div>
  );
}

export default App;

/src/app.css

/* App.css */
.App {
  max-width: 1200px;
  margin: 0 auto;
  padding: 20px;
  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
}

h1 {
  color: #2c3e50;
  text-align: center;
  margin-bottom: 40px;
  font-size: 2.5em;
}

/* Blog Form Styling */
.blog-form {
  background: #fff;
  padding: 20px;
  border-radius: 8px;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  margin-bottom: 30px;
}

.blog-form input[type="text"],
.blog-form textarea {
  width: 100%;
  padding: 12px;
  margin: 8px 0;
  border: 1px solid #ddd;
  border-radius: 4px;
  box-sizing: border-box;
}

.blog-form button {
  background-color: #3498db;
  color: white;
  padding: 12px 20px;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  font-size: 16px;
  margin-top: 10px;
}

.blog-form button:hover {
  background-color: #2980b9;
}

/* Blog List Styling */
.blog-list {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
  gap: 20px;
  margin-bottom: 30px;
}

.blog-card {
  background: #fff;
  border-radius: 8px;
  padding: 20px;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  transition: transform 0.2s;
}

.blog-card:hover {
  transform: translateY(-5px);
}

.blog-card h2 {
  color: #2c3e50;
  margin-top: 0;
}

.blog-card p {
  color: #666;
}

/* Blog Post Styling */
.blog-post {
  background: #fff;
  padding: 30px;
  border-radius: 8px;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  margin-top: 20px;
}

.blog-post h2 {
  color: #2c3e50;
  margin-bottom: 20px;
}

/* Comments Section */
.comments-section {
  margin-top: 20px;
  padding-top: 20px;
  border-top: 1px solid #eee;
}

.comment {
  background: #f9f9f9;
  padding: 15px;
  border-radius: 4px;
  margin-bottom: 10px;
}

.comment-form {
  margin-top: 20px;
}

.comment-form textarea {
  width: 100%;
  padding: 12px;
  border: 1px solid #ddd;
  border-radius: 4px;
  margin-bottom: 10px;
}

/* Buttons */
.btn {
  padding: 8px 16px;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  margin-right: 10px;
  font-size: 14px;
}

.btn-edit {
  background-color: #2ecc71;
  color: white;
}

.btn-delete {
  background-color: #e74c3c;
  color: white;
}

.btn:hover {
  opacity: 0.9;
}

/* Responsive Design */
@media (max-width: 768px) {
  .App {
    padding: 10px;
  }
  
  .blog-list {
    grid-template-columns: 1fr;
  }
  
  .blog-form,
  .blog-post {
    padding: 15px;
  }
}